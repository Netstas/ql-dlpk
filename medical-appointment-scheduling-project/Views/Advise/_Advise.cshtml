@model medical_appointment_scheduling_project.Models.Patient

@{
    Layout = null;
    var currentUserId = Session["id"] as int?;

}
<div class="form-register">
    <h3 class="form-register__title">Đăng ký nhận tư vấn</h3>
    <div class="form-register__container">
        <p class="text-center">
            Vui lòng để lại thông tin và nhu cầu của
            Quý khách để được nhận tư vấn
        </p>
        <form action="/advise/put" method="post">

            @Html.AntiForgeryToken()
            @if (currentUserId != null)
            {
                <input type="hidden" name="AdminId" value="@currentUserId" />
            }
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="mb-3">
                @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control", placeholder = "Họ và tên (*)", type = "text" } })

                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3">
                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "Số điện thoại (*)", type = "number" } })

                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3">
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.ClinicAddressId,
                    new SelectList(ViewBag.dbClinicAddresses, "Id", "Address"),
                    "Chọn địa chỉ phòng khám", new { @class = "form-control", id = "clinicAddressDropdown" })
                </div>
            </div>
            <div class="mb-3">
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.SpecializationId,
                        new SelectList(Enumerable.Empty<SelectListItem>(), "Id", "Name"),
                        "Chọn chuyên khoa", new { @class = "form-control", id = "specializationDropdown" })
                </div>
            </div>
            <div class="mb-3">
               <div class="col-md-12">
                    @Html.DropDownListFor(model => model.DoctorId,
                    new SelectList(Enumerable.Empty<SelectListItem>(), "Id", "Name"),
                    "Chọn bác sĩ", new { @class = "form-control", id = "doctorDropdown" })
                </div>
            </div>
            <div class="mb-3">
                @Html.TextAreaFor(model => model.Symptoms, new { @class = "form-control", rows = "3", placeholder = "Nhập triệu chứng (*)" })

                @Html.ValidationMessageFor(model => model.Symptoms, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3">
                @Html.LabelFor(model => model.BookingDate, htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.BookingDate, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", type = "datetime-local" })
                    @Html.ValidationMessageFor(model => model.BookingDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <button class="form-register__form-btn mb-3" type="submit" name="submit">Đặt lịch tư vấn</button>
        </form>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>

<script src="~/asset/jquery-validation/jquery.validate-vsdoc.js"></script>
<script src="~/asset/jquery-validation/jquery.validate.js"></script>
<script src="~/asset/jquery-validation/jquery.validate.min.js"></script>
<script src="~/asset/jquery-validation/jquery.validate.unobtrusive.js"></script>
<script src="~/asset/jquery-validation/jquery.validate.unobtrusive.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
    $(document).ready(function () {
        $("#clinicAddressDropdown").change(function () {
            var clinicAddressId = $(this).val();

            axios.get(`/api/GetSpecializations?clinicAddressId=${clinicAddressId}`)
                .then(function (response) {
                    var specializations = response.data;

                    var dropdown = $("#specializationDropdown");
                    dropdown.empty();
                    var defaultText = 'Chọn chuyên khoa';
                    dropdown.append('<option value="">' + defaultText + '</option>');

                    if (specializations.length > 0) {
                        $.each(specializations, function (index, item) {
                            dropdown.append($('<option></option>').val(item.Id).text(item.Name));
                        });
                    }
                })
                .catch(function (error) {
                    console.error('Error fetching Specializations:', error);
                });
        });

        $("#specializationDropdown").change(function () {
            var specializationId = $(this).val();
            console.log(specializationId)

            axios.get(`/api/GetDoctors?specializationId=${specializationId}`)
                .then(function (response) {
                    var doctors = response.data;
                    var dropdown = $("#doctorDropdown");
                    dropdown.empty();
                    var defaultText = 'Chọn bác sĩ';
                    dropdown.append('<option value="">' + defaultText + '</option>');

                    if (doctors.length > 0) {
                        $.each(doctors, function (index, item) {
                            dropdown.append($('<option></option>').val(item.Id).text(item.Name));
                        });
                    }
                })
                .catch(function (error) {
                    console.error('Error fetching Doctors:', error);
                });
        });
    });
</script>
